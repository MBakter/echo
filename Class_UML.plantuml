@startuml UML

class Labyrinth {
    +roomList : Room[]

    +split(room: Room): void
    +merge(room: Room1, room: Room2): void
}

/' Removed implementing IItemHolder '/
class Room implements IItemTarget {
    + maxCharacter: int
    + states : ERoomState[]
    + itemList : Item[]
    + studentList : Student[]
    + teacherList : Teacher[]
    + neighbouringRooms : Room[]

    + getNeighbours(): Room[]
    + addStudent(student: Student): void
    + removeStudent(student: Student): void
    + addTeacher(teacher: Teacher): void
    + removeTeacher(teacher: Teacher): void
    + addNeighbour(room: Room): void
    + removeNeighbour(room: Room): void
    + addItem(IItem: item): void
    + removeItem(IItem: item) : void

    + split(): void
    + merge(room: Room): void
}

enum ECharacterState {
    ALIVE
    UNCONSCIOUS
    DEAD
}

/' Removed implementing IItemHolder '/
abstract class Character implements IItemTarget{
    + room: Room
    +itemList : Item[]
    +state : ECharacterState

    + move(Room): void
    + TeacherAttacked(Student) : void
    + RoomPoisoned(Student) : void
    + RoomCleanFromPoison(Student) : void
    + getState(): ECharacterState
    + setState(ECharacterState): void
    + addItem(IItem: item): void
    + removeItem(IItem: item) : void
}

Character "0" o-- "1" ECharacterState

interface IItem {
    + useItem(t: IItemTarget): void
    + pickUp(Student): void
    + pickUp(Teacher): void
    + visitRoom(Room): void
    + visitStudent(Student): void
    + visitTeacher(Teacher): void
    + TeacherAttacked(Student) : void
    + RoomPoisoned(Student) : void
    + RoomCleanFromPoison(Student) : void
}

interface IItemTarget{
    + accept(v: IItem, e: EventType)
    + accept(v: IItem)
}

class Teacher extends Character{
    + move(Room): void
    + update(EventType): void
    + getState(): ECharacterState
    + setState(ECharacterState): void
}

class Student extends Character{
    + move(Room): void
    + update(EventType): void
    + getState(): ECharacterState
    + setState(ECharacterState): void
}

/' interface IItemHolder {
    + addItemy(Item: Item): void
    + removeItem(Item: Item): void
} '/

enum ERoomState {
    CURSED
    POISONED
    TRANSISTOR_INSIDE
}

abstract class Timer {
    + timer
}

class TVSZ implements IItem {
    +hitPoints : int

    + getHitpoints(): int
}

class Beer implements IItem, Timer {
    + timer

    + activateBeer(): void
}

class Transistor implements IItem  {
    + paired : bool
    + roomOfPair : Room

    + setRoom(Room): void
    + pair(): void
    + teleportCharacter(Student): void
}

class Mask implements IItem, Timer  {
    + timer

    + getTime(): float
}

class Sponge  implements IItem, Timer  {
    + timer

    + getTime(): float
}

class Cheese  implements IItem, Timer {
    + isUsed : bool
}

class Logarlec  implements IItem  {
}

Room "1" o-- "0..*" Student: + students
Room "1" o-- "0..*" Teacher: + teachers
Room "1" *-- "0..*" Room: + neighbours
Character "1" *-- "0..*" IItem: + Items
Room "1" *-- "0..*" IItem: + Items
Room *-- ERoomState: + state
Labyrinth "1" *-- "0..*" Room: + rooms

@enduml
