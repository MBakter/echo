@startuml UML

class Labyrinth {
    +roomList : Room[]

    +split(room: Room): void
    +merge(room: Room1, room: Room2): void
}

Labyrinth "1" *-- "0..*" IRoomManager: roomList

interface IRoomManager {
    + split(): void
    + merge(room: Room): void
}

/' Removed implementing IItemHolder '/
class Room implements IItemTarget, IRoomManager {
    + maxPlayer: int
    + states : ERoomState[]
    + itemList : Item[]
    + studentList : Student[]
    + teacherList : Teacher[]
    + neighbouringRooms : Room[]

    + getNeighbours(): Room[]
    + addStudent(student: Student): void
    + removeStudent(student: Student): void
    + addTeacher(teacher: Teacher): bool
    + removeTeacher(teacher: Teacher): void
    + addNeighbour(room: Room): void
    + removeNeighbour(room: Room): void
    + addItem(IItem: item): void
    + removeItem(IItem: item) : void

    + split(): void
    + merge(room: Room): void
}

Room "1" o-- "0..*" Student: + students
Room "1" o-- "0..*" Teacher: + teachers
Room "1" *-- "0..*" Room: + neighbours
Room "1" *-- "0..*" IItem: + Items
Room *-- ERoomState: + state


enum EPlayerState {
    ALIVE
    UNCONSCIOUS
    DEAD
}

/' Removed implementing IItemHolder '/
abstract class Player implements IItemTarget{
    + room: Room
    + itemList : Item[]
    + state : EPlayerState

    + move(Room): void
    + TeacherAttacked(Student) : void
    + RoomPoisoned(Student) : void
    + RoomCleanFromPoison(Student) : void
    + getState(): EPlayerState
    + setState(EPlayerState): void
    + addItem(IItem: item): void
    + removeItem(IItem: item) : void
}

Player "0" o-- "1" EPlayerState
Player "1" *-- "0..*" IItem: + Items

interface IItem {
    + useItem(t: IItemTarget): void
    + pickUp(Student): void
    + pickUp(Teacher): void
    + visitRoom(Room): void
    + visitStudent(Student): void
    + visitTeacher(Teacher): void
    + TeacherAttacked(Student) : bool
    + RoomPoisoned(Student) : void
    + RoomCleanFromPoison(Student) : void
}

interface IItemTarget{
    + accept(v: IItem)
}

class Teacher extends Player{
    + move(Room): void
    + getState(): EPlayerState
    + setState(EPlayerState): void
}

class Student extends Player{
    + move(Room): void
    + getState(): EPlayerState
    + setState(EPlayerState): void
}

/' interface IItemHolder {
    + addItemy(Item: Item): void
    + removeItem(Item: Item): void
} '/

enum ERoomState {
    CURSED
    POISONED
    TRANSISTOR_INSIDE
}

interface ITimer {
    + updateTimer()
    + startTimer(t)
    + pauseTimer()
}

class TVSZ implements IItem {
    + hitPoints : int

    + TeacherAttacked(Teacher) : bool
}

class Transistor implements IItem  {
    + paired : bool
    + roomOfPair : Room

    + setRoom(Room): void
    + pair(): void
    + teleportPlayer(Student): void
}

enum BeerState {
    INACTIVE
    RUNNING
    DISABLED
}

class Beer implements IItem {
    + timer : ITimer
    + state : BeerState

    + setState(BeerState): void
}
Beer *-- "1" ITimer
Beer *-- "1" BeerState

class Mask implements IItem  {
    + timer : ITimer
    + functional : bool

    + setFunctional(bool) : void
    + RoomPoisoned(Student) : void
    + RoomClearFromPoison(Student) : void

}
Mask *-- "1" ITimer

class Sponge  implements IItem {
    + timer : ITimer

}
Sponge *-- "1" ITimer

class Cheese  implements IItem {
    + timer : ITimer
    + isUsed : bool

}
Cheese *-- "1" ITimer

class Logarlec  implements IItem  {
}



@enduml
