@startuml UML

class Labyrinth {

}

class Room implements IItemHolder, IItemTarget{
    + maxPlayer: int

    +getNeighbours(): Room[]
    +addStudent(student: Student): void
    +removeStudent(student: Student): void
    +addTeacher(teacher: Teacher): void
    +removeTeacher(teacher: Teacher): void
    +addNeighbour(room: Room): void
    +removeNeighbour(room: Room): void
    +merge(room: Room): void
    +split(): Room
    +isFull(): boolean

    +notifyStudents(): void
    +notifyTeachers(): void

}

abstract class Player implements IItemHolder, IItemTarget{
    + room: Room
    + move(Room): void
}

interface IVisitor {
    visitRoom(Room, EuseTarget): void
    visitStudent(Student, EuseTarget): void
    visitTeacher(Teacher, EuseTarget): void
}

abstract class Item{
    -itemV: ItemVisitor
    + useItem(EItem, IITemTarget, EuseTarget): void
    + isAvaliable(): boolean
}

interface IItemTarget{
    + accept(v: IVisitor, t: EuseTarget)
}

class Teacher extends Player{}


class Student extends Player{
}

enum EuseTarget{
    Self
    NotSelf
}

interface IItemHolder {
    + addItemy(Item: Item): void
    + removeItem(Item: Item): void
}

enum ERoomState {
    OPENED
    CLOSED
    POISONED

}

class TVSZ implements IVisitor {
}

class Beer  implements IVisitor {
}

class Transistor implements IVisitor  {
}

class Mask  implements IVisitor  {
}

class Sponge  implements IVisitor  {
}

class Cheese  implements IVisitor {
}

class Logarlec  implements IVisitor  {
}

Room "1" o-- "0..*" Student: + students
Room "1" o-- "0..*" Teacher: + teachers
Room "1" *-- "0..*" Room: + neighbours
Player "1" *-- "0..*" Item: + Items
Room "1" *-- "0..*" Item: + Items
Room *-- ERoomState: + state
Labyrinth "1" *-- "0..*" Room: + rooms

Item ..> IVisitor
Item ..> EuseTarget
IVisitor ..> EuseTarget

@enduml
