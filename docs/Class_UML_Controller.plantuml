@startuml UML

title Logarlec Class Diagram of Controller

class Labyrinth {
    + roomList : List<IRoom>

    + generateFromFile(File) : void
    + randomMove() : void
}
Labyrinth "1"*--"0,..." IRoom
interface IRoom {
    + split() : Room
    + merge(Room) : bool
    + addNeighbour(Room) : void
}

interface ITimedEntity {
    + timerEnd() : void
}

class TimedObject {
    + time : int
    + object : ITimer
    + active : boolean

    + TimedObject(ITimedEntity)
    + getObject() : ITimer
    + getTime() : int
    + isActive() : boolean
    + activate(int) : void
    + pause() : void
    + iterateTime() : boolean
}
TimedObject .-> ITimedEntity

interface ITimer {
    + startTimer(ITimedEntity, int) : void
    + pauseTimer(ITimedEntity) : void
    + addItem(ITimedEntity) : void
}

class Timer implements ITimer {
    + list : List<TimedObject>

    + Timer()
    + getList() : List<TimedObject>
    + addItem(ITimedEntity) : void
    + iterateTime() : void
    + startTimer(ITimedEntity, int) : void
    + pauseTimer(ITimedEntity) : void
}
Timer "1"*--"0,..." TimedObject
Timer .-> ITimedEntity

class Controller {
    + players : static List<Player>
    + endOfGame : static boolean
    + Map : static Labyrinth
    + mapDirectoryPath : static final String
    
    + main(String[]) : static void
    + chooseMap() : static void
    + initGame() : static void
    + GameCycle() : static void
    + StudentMove(Student) : static void
    + TeacherMove(Teacher) : static void
    + CleanerMove(Cleaner) : static void
    + endGame(boolean) : static void
}
Controller .-> Timer
Controller "1"*--"1" Labyrinth