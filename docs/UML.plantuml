@startuml UML

class Labirintus {

}

class Room implements IItemHolder{
    - maxPlayer: int

    +getSzomszedok(): Room[]
    +addHallgato(Hallgato: Hallgato): void
    +removeHallgato(Hallgato: Hallgato): void
    +addOktato(Oktato: Oktato): void
    +removeOktato(Oktato: Oktato): void
    +addSzomszed(room: Room): void
    +removeSzomszed(room: Room): void
    +egyesul(room: Room): void
    +szetszed(): Room
    +isFull(): boolean

    +notifyHallgatok(): void
    +notifyOktatok(): void

}

Room "1" o-- "0..*" Hallgato: # hallgatok
Room "1" o-- "0..*" Oktato: # oktatok
Room "1" *-- "0..*" Room: # szomszedok
IItemHolder "1" *-- "0..*" Items: # targyak
Room *-- ESzobaAllapot: # allapot
Labirintus "1" *-- "0..*" Room: # szobak

abstract class Jatekos implements IItemHolder{
  + room: Room
  + move(Room): void
}

interface IVisitor {
  + use(mask: Mask): boolean
  + use(sponge: Sponge): boolean
  + use(beer: Beer): boolean
  + use(cheese: Cheese): boolean
  + use(transistor: TransistorPair): boolean
}

class ItemVisitor {
  + saveFromTeacher(items: Item[]): boolean
  + saveFromPoison(items: Item[]): boolean
  + makeRoomPoisoned(items: Item[], room: Room): boolean
}

IVisitor <|-- ItemVisitor

abstract class Items {
  + accept(Visitor)
  + isAvaliable(): boolean
}

class TVSZ extends Items {
  + accept(Visitor)
  + isAvaliable(): boolean
}

class Beer extends Items {
  + accept(Visitor)
  + isAvaliable(): boolean
}

class TransistorPair extends Items {
  + accept(Visitor)
  + isAvaliable(): boolean
}

class Mask extends Items {
  + accept(Visitor)
  + isAvaliable(): boolean
}

class Sponge extends Items {
  + accept(Visitor)
  + isAvaliable(): boolean
}

class Cheese extends Items {
  + accept(Visitor)
  + isAvaliable(): boolean
}

class Logarlec extends Items {
  + accept(Visitor)
  + isAvaliable(): boolean
}

Items ..> IVisitor
IVisitor ..>  TVSZ
IVisitor ..>  TransistorPair
IVisitor ..>  Beer
IVisitor ..>  Cheese
IVisitor ..>  Mask
IVisitor ..>  Logarlec
IVisitor ..>  Sponge


Hallgato ..> ItemVisitor
Hallgato ..> Items


class Oktato extends Jatekos{}
class Hallgato extends Jatekos{}



interface IItemHolder {
    # maxTargy: int
    # addTargy(tárgy: Targy): void
    # removeTargy(tárgy: Targy): void
}

enum ESzobaAllapot {
  OPENED
  CLOSED
  GAZOS
}

' interface IActor{
'   +accept(TargyVisitor): void
'   +mozog(Szoba): Szoba
' }
' interface TargyVisitor
' interface SzobaEventListener{
'   +update(eventType): void
' }

' abstract class Actor implements IActor, SzobaEventListener {
'   #jelenSzoba: Szoba
'   +felvesz(Targy): void
'   +lerak(Targy):void
' }
' class Hallgato implements Actor {
'   +hasznal(Targy): void
' }
' class Oktato implements Actor {
' }

' Actor "1" --* "0..*" Szoba
' IActor - TargyVisitor


@enduml
