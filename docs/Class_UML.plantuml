@startuml UML

class Labyrinth {
    +roomList : Room[]

    + split(): Room
    + merge(Room): bool
}

Labyrinth "1" *-- "0..*" IRoomManager: roomList

interface IRoomManager {
    + split(): Room
    + merge(Room): bool
}

class Room implements IRoomManager {
    + maxPlayer: int
    + effects : ERoomEffects[]
    + itemList : Item[]
    + studentList : Student[]
    + teacherList : Teacher[]
    + cleanerList : Cleaner[]
    + neighbouringRooms : Room[]
    + isSticky : bool
    + isCleaned : bool
    + numOfVisitors : int
    + MaxVisitorsAfterCleanup : static int

    + addStudent(Student): void
    + removeStudent(Student): void
    + addTeacher(Teacher): bool
    + removeTeacher(Teacher): void
    + addCleaner(Cleaner): bool
    + removeCleaner(Cleaner): void
    + getTeachers() : Teacher[]
    + addNeighbour(Room): void
    + removeNeighbour(Room): void
    + getNeighbours() : Room[]
    + addItem(IItem): void
    + removeItem(IItem) : void
    + addEffect(ERoomEffects) : void
    + removeEffect(ERoomEffects) : void
    + purifyRoom() : void

    + split(): Room
    + merge(Room): bool
}

Room "1" o-- "0..*" Student: + studentList
Room "1" o-- "0..*" Teacher: + teacherList
Room "1" *-- "0..*" Room: + neighbours
Room "1" *-- "0..*" IItem: + itemList
Room *-- ERoomEffects: + effects


enum EPlayerState {
    ALIVE
    UNCONSCIOUS
    DEAD
}

abstract class Player implements ITimer{
    + room: Room
    + itemList : IItem[]
    + state : EPlayerState
    + timer : ITimer

    + move(Room): void
    + RoomPoisoned() : void
    + RoomCleanFromPoison() : void
    + CleanerEntered() : void
    + getState(): EPlayerState
    + setState(EPlayerState): void
    + getRoom() : Room
    + addItem(IItem): void
    + removeItem(IItem) : void
    + getItemList() : IItem[]
    + pickUp(IItem) : void
    + dropItem(IItem) : void
    + timerEnd() : void
}

Player "0" o-- "1" EPlayerState
Player "1" *-- "0..*" IItem: + itemList

interface IItem {
    + useItem(Player): void
    + pickUp(Student): void
    + pickUp(Teacher) : void
    + dropItem(Player) : void

    + TeacherAttacked(Student) : bool
    + RoomPoisoned(Student) : bool
    + RoomCleanFromPoison(Student) : void
    + TeacherAttackable(Student) : void
}

class Teacher extends Player {
    + move(Room): void
    + getState(): EPlayerState
    + setState(EPlayerState): void
}

class Student extends Player {
    + move(Room): void
    + getState(): EPlayerState
    + setState(EPlayerState): void
    + TeacherAttacked() : void
}

class Cleaner extends Player {
    + move(Room): void
    + getState(): EPlayerState
    + setState(EPlayerState): void
}

enum ERoomEffects {
    CURSED
    POISONED
    TRANSISTOR_INSIDE
    STICKY
}

interface ITimer {
    + timerEnd() : void
}

class TVSZ implements IItem {
    + hitPoints : int
    + fake : bool

    + TeacherAttacked(Student) : bool
}

class Transistor implements IItem  {
    + active : bool
    + room : Room
    + pair: Transistor

    + activateTransistor() : void
    + pairTransistor(Transistor) : void
    + unpairTransistor(Transistor) : void
    + dropItem(Player) : void
    + setRoom(Room) : void
    + unactivateTransistor() : void
}

enum BeerState {
    INACTIVE
    RUNNING
    DISABLED
}

class Beer implements IItem, ITimer {
    + timer : Timer
    + state : BeerState
    
    + useItem(Player) : void
    + timerEnd() : void
    + setState(BeerState): void
    + TeacherAttacked(Student) : bool
}
Beer *-- "1" BeerState

class Mask implements IItem, ITimer  {
    + timer : Timer
    + functional : bool
    + student : Student
    + fake : bool

    + timerEnd() : void
    + pickUp(Student) : void
    + RoomPoisoned(Student) : bool
    + RoomClearFromPoison(Student) : void

}

class Sponge implements IItem, ITimer {
    + timer : Timer
    + functional : bool

    + timerEnd() : void
    + TeacherAttackable(Student) : void
}

class Cheese implements IItem, ITimer {
    + timer : Timer
    + isUsed : bool
    + room : Room
    
    + useItem(Player) : void
    + timerEnd() : void
}

class Purifier implements IItem {
    + isUsed : bool

    + useItem(Player) : void
}

class Logarlec  implements IItem  {
    + fake : bool

    + useItem(Student) : void
    + dropItem(Player) : void
}

class Timer {
    pauseTimer(IItem) : void
    startTimer(IItem, float) : void
}
Timer "1"*--> "1" ITimer


@enduml
