@startuml UML

title Logarlec Class Diagram of Model

interface IRoomManager {
    + split() : Room
    + merge(Room) : bool
}

class Room implements IRoomManager {
    + maxPlayer : int
    + effects : ERoomEffects[]
    + itemList : Item[]
    + studentList : Student[]
    + teacherList : Teacher[]
    + cleanerList : Cleaner[]
    + neighbouringRooms : Room[]
    + isSticky : bool
    + isCleaned : bool
    + numOfVisitors : int
    + MaxVisitorsAfterCleanup : static int

    + addStudent(Student) : void
    + removeStudent(Student) : void
    + addTeacher(Teacher) : bool
    + removeTeacher(Teacher) : void
    + addCleaner(Cleaner) : bool
    + removeCleaner(Cleaner) : void
    + getTeachers() : Teacher[]
    + addNeighbour(Room) : void
    + removeNeighbour(Room) : void
    + getNeighbours() : Room[]
    + addItem(IItem) : void
    + removeItem(IItem) : void
    + addEffect(ERoomEffects) : void
    + removeEffect(ERoomEffects) : void
    + purifyRoom() : void

    + split() : Room
    + merge(Room) : bool
}

Room "1" o-- "0..*" Student: + studentList
Room "1" o-- "0..*" Teacher: + teacherList
Room "1" o-- "0..*" Cleaner: + cleanerList
Room "1" *-- "0..*" Room: + neighbours
Room "1" *-- "0..*" IItem: + itemList
Room *-- ERoomEffects: + effects

enum EPlayerState {
    ALIVE
    UNCONSCIOUS
    DEAD
}

abstract class Player implements ITimedEntity{
    + room  : Room
    + itemList : IItem[]
    + state : EPlayerState
    + timer : ITimer
    + TIME  : static final int

    + move(Room): void
    + RoomPoisoned() : void
    + RoomCleanFromPoison() : void
    + CleanerEntered() : void
    + getState(): EPlayerState
    + setState(EPlayerState): void
    + getRoom() : Room
    + addItem(IItem): void
    + removeItem(IItem) : void
    + getItemList() : IItem[]
    + pickUp(IItem) : void
    + dropItem(IItem) : void
    + timerEnd() : void
}

Player "0" o-- "1" EPlayerState
Player "1" *-- "0..*" IItem: + itemList
Player *--"1" ITimer

interface IItem {
    + useItem(Player) : void
    + pickUp(Student) : void
    + pickUp(Teacher) : void
    + dropItem(Player) : void

    + TeacherAttacked(Student) : bool
    + RoomPoisoned(Student) : bool
    + RoomCleanFromPoison(Student) : void
    + TeacherAttackable(Student) : void
}

class Teacher extends Player {
    + move(Room) : void
    + getState() : EPlayerState
    + setState(EPlayerState) : void
}

class Student extends Player {
    + move(Room) : void
    + getState() : EPlayerState
    + setState(EPlayerState) : void
    + TeacherAttacked() : void
}

class Cleaner extends Player {
    + move(Room) : void
    + getState() : EPlayerState
    + setState(EPlayerState) : void
}

enum ERoomEffects {
    CURSED
    POISONED
    TRANSISTOR_INSIDE
    STICKY
}

interface ITimer {
    + startTimer(ITimedEntity) : void
    + pauseTimer(ITimedEntity, int) : void
    + addItem(ITimedEntity) : void
}

interface ITimedEntity {
    + timerEnd() : void
}

class TVSZ implements IItem {
    + hitPoints : int
    + fake : bool

    + TeacherAttacked(Student) : bool
}

class Transistor implements IItem  {
    + active : bool
    + room : Room
    + pair: Transistor

    + activateTransistor() : void
    + pairTransistor(Transistor) : void
    + unpairTransistor(Transistor) : void
    + dropItem(Player) : void
    + setRoom(Room) : void
    + deactivateTransistor() : void
}

enum EBeerState {
    INACTIVE
    RUNNING
    DISABLED
}

class Beer implements IItem, ITimedEntity {
    + timer : Timer
    + state : BeerState
    + TIME  : static final int
    
    + useItem(Player) : void
    + timerEnd() : void
    + setState(BeerState) : void
    + TeacherAttacked(Student) : bool
}
Beer *-- "1" BeerState
Beer *--"1" ITimer

class Mask implements IItem, ITimedEntity  {
    + timer : Timer
    + functional : bool
    + student : Student
    + fake : bool
    + TIME  : static final int

    + timerEnd() : void
    + pickUp(Student) : void
    + RoomPoisoned(Student) : bool
    + RoomClearFromPoison(Student) : void

}
Mask *--"1" ITimer

class Sponge implements IItem, ITimedEntity {
    + timer : Timer
    + functional : bool
    + TIME  : static final int

    + timerEnd() : void
    + TeacherAttackable(Student) : void
}
Sponge *--"1" ITimer

class Cheese implements IItem, ITimedEntity {
    + timer : Timer
    + isUsed : bool
    + room : Room
    + TIME  : static final int

    + useItem(Player) : void
    + timerEnd() : void
}
Cheese *--"1" ITimer

class Purifier implements IItem {
    + isUsed : bool

    + useItem(Player) : void
}

class Logarlec  implements IItem  {
    + fake : bool

    + useItem(Student) : void
    + dropItem(Player) : void
}

@enduml
