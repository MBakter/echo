@startuml UML

class Labyrinth {
    +roomList : Room[]

    + split(): Room
    + merge(Room): bool
}

Labyrinth "1" *-- "0..*" IRoomManager: roomList

interface IRoomManager {
    + split(): Room
    + merge(Room): bool
}

/' Removed implementing IItemHolder '/
class Room implements IRoomManager {
    + maxPlayer: int
    + effects : ERoomEffects[]
    + itemList : Item[]
    + studentList : Student[]
    + teacherList : Teacher[]
    + neighbouringRooms : Room[]

    + addStudent(Student): void
    + removeStudent(Student): void
    + addTeacher(Teacher): bool
    + removeTeacher(Teacher): void
    + getTeachers() : Teacher[]
    + addNeighbour(Room): void
    + removeNeighbour(Room): void
    + getNeighbours() : Room[]
    + addItem(IItem): void
    + removeItem(IItem) : void
    + addEffect(ERoomEffects) : void
    + removeEffect(ERoomEffects) : void

    + split(): Room
    + merge(Room): bool
}

Room "1" o-- "0..*" Student: + studentList
Room "1" o-- "0..*" Teacher: + teacherList
Room "1" *-- "0..*" Room: + neighbours
Room "1" *-- "0..*" IItem: + itemList
Room *-- ERoomEffects: + effects


enum EPlayerState {
    ALIVE
    UNCONSCIOUS
    DEAD
}

/' Removed implementing IItemHolder '/
abstract class Player {
    + room: Room
    + itemList : Item[]
    + state : EPlayerState
    + timer : ITimer

    + move(Room): void
    + RoomPoisoned() : void
    + RoomCleanFromPoison() : void
    + getState(): EPlayerState
    + setState(EPlayerState): void
    + addItem(IItem): void
    + removeItem(IItem) : void
    + pickUp(IItem)
    + dropItem(IItem)
    + timerEnd()
}

Player "0" o-- "1" EPlayerState
Player "1" *-- "0..*" IItem: + itemList
Player *-- "1" ITimer

interface IItem {
    + useItem(Player): void
    + pickUp(Player): void
    + dropItem(Player) : void

    + TeacherAttacked(Student) : bool
    + RoomPoisoned(Student) : bool
    + RoomCleanFromPoison(Student) : void
    + TeacherAttackable(Student) : void
}

class Teacher extends Player{
    + move(Room): void
    + getState(): EPlayerState
    + setState(EPlayerState): void
}

class Student extends Player{
    + move(Room): void
    + getState(): EPlayerState
    + setState(EPlayerState): void
    + TeacherAttacked() : void
    + TeacherAttackable() : void
}

/' interface IItemHolder {
    + addItemy(Item: Item): void
    + removeItem(Item: Item): void
} '/

enum ERoomEffects {
    CURSED
    POISONED
    TRANSISTOR_INSIDE
}

interface ITimer {
    + startTimer(float) : void
    + pauseTimer() : void
}

class TVSZ implements IItem {
    + hitPoints : int

    + TeacherAttacked(Student) : bool
}

class Transistor implements IItem  {
    + active : bool
    + room : Room
    + pair: Transistor

    + activateTransistor() : void
    + pairTransistor(Transistor t2) : void
    + unpairTransistor(Transistor t2) : void
    + dropItem(Player s) : void
    + pickUp(Player s) : void
    + setRoom(Room r) : void
    + unactivateTransistor() : void
}

enum BeerState {
    INACTIVE
    RUNNING
    DISABLED
}

class Beer implements IItem {
    + timer : ITimer
    + state : BeerState
    
    + timerEnd() : void
    + setState(BeerState): void
    + TeacherAttacked(Student) : bool
    /'+ activateBeer() : void '/
}
Beer *-- "1" ITimer
Beer *-- "1" BeerState

class Mask implements IItem  {
    + timer : ITimer
    + functional : bool
    + student : Student

    + timerEnd() : void
    + pickUp(Student) : void
    + RoomPoisoned(Student) : bool
    + RoomClearFromPoison(Student) : void

}
Mask *-- "1" ITimer

class Sponge  implements IItem {
    + timer : ITimer
    + functional : bool

    + timerEnd() : void
    + TeacherAttackable(Student) : void
}
Sponge *-- "1" ITimer

class Cheese  implements IItem {
    + timer : ITimer
    + isUsed : bool

    + timerEnd() : void
}
Cheese *-- "1" ITimer

class Logarlec  implements IItem  {
    + pickUp(Student) : void
}



@enduml
